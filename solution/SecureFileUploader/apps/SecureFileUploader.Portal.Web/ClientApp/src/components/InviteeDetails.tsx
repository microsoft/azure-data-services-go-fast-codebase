import {
    Box,
    FormControl,
    FormLabel,
    Heading,
    HStack,
    Input,
    Table,
    TableContainer,
    Tbody,
    Td,
    Th,
    Thead,
    Tr,
} from '@chakra-ui/react';
import React, { MutableRefObject, useEffect, useState } from 'react';
import { castInviteeFromDtoDeep, InviteeState } from '../models/ProgramState';
import { Api } from '../services/api/api-client';
import { CancelTokenDialog } from './CancelTokenDialog';
import { ReissueTokenDialog } from './ReissueTokenDialog';
import { ResendEmailDialog } from './ResendEmailDialog';

export const InviteeDetails: React.FC<{
    inviteeId: string;
    load: boolean;
}> = (props) => {
    const cancelRef = React.useRef() as MutableRefObject<HTMLElement>;
    const [invitee, setInvitee] = useState<InviteeState | null>(null);

    const api = new Api();
    api.baseUrl = process.env.REACT_APP_API_URL || '';

    useEffect(() => {
        if (props.load === true) {
            loadInviteeDetails();
        }
    }, [props.load]);

    function loadInviteeDetails() {
        api.api.inviteesDetail(props.inviteeId).then((response) => {
            setInvitee(castInviteeFromDtoDeep(response.data));
        });
    }

    return (
        props.load === true ?
            <Box p={6}>
                <Heading size="md">Invitee details</Heading>
                <br />
                <HStack spacing={40}>
                    <Box>
                        <FormControl>
                            <FormLabel htmlFor="input_opens">Practice Id</FormLabel>
                            {invitee?.details.practiceId}
                        </FormControl>
                    </Box>
                    <Box>
                        <FormControl>
                            <FormLabel htmlFor="input_closes">CRM Id</FormLabel>
                            {invitee?.details.crmId}
                        </FormControl>
                    </Box>
                    <Box>
                        <FormControl>
                            <FormLabel htmlFor="input_closes">PHN</FormLabel>
                            {invitee?.details.phn}
                        </FormControl>
                    </Box>
                    <Box>
                        <FormControl>
                            <FormLabel htmlFor="input_closes">
                                Folder name
                            </FormLabel>
                            {invitee?.details.folderName}
                        </FormControl>
                    </Box>
                </HStack>
                <br />
                <Heading size="md">Access tokens</Heading>
                <br />
                {invitee?.details.accessTokens.length === 0 ? (
                    <>
                        <Box>
                            No access tokens generated yet. An access token will be
                            generated when the program commences.
                        </Box>
                    </>
                ) : (
                    <TableContainer>
                        <Table>
                            <Thead>
                                <Tr>
                                    <Th>Generated</Th>
                                    <Th>Active from</Th>
                                    <Th>Active to</Th>
                                    <Th>Generated by</Th>
                                    <Th></Th>
                                </Tr>
                            </Thead>
                            <Tbody>
                                {invitee?.details.accessTokens.map(
                                    (accessToken) => (
                                        <Tr>
                                            <Td>{accessToken.generatedOn}</Td>
                                            <Td>{accessToken.startsOn}</Td>
                                            <Td>{accessToken.endsOn}</Td>
                                            <Td>{accessToken.generatedBy}</Td>
                                        </Tr>
                                    )
                                )}
                            </Tbody>
                        </Table>
                    </TableContainer>
                )}
                <br />
                <Heading size="md">Action history</Heading>
                <br />
                {invitee?.details.inviteeEvents.length === 0 ? (
                    <>
                        <Box>No action history recorded against this invitee.</Box>
                    </>
                ) : (
                    <TableContainer>
                        <Table>
                            <Thead>
                                <Tr>
                                    <Th>Date</Th>
                                    <Th>Event</Th>
                                    <Th>Author</Th>
                                </Tr>
                            </Thead>
                            <Tbody>
                                {invitee?.details.inviteeEvents.map(
                                    (inviteeEvent) => (
                                        <Tr>
                                            <Td>{inviteeEvent.performedOn}</Td>
                                            <Td>{inviteeEvent.description}</Td>
                                            <Td>{inviteeEvent.performedBy}</Td>
                                        </Tr>
                                    )
                                )}
                            </Tbody>
                        </Table>
                    </TableContainer>
                )}
            </Box> : <Box></Box>
    );
};
